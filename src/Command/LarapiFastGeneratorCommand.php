<?php

namespace Versoo\LarapiFast\Command;

use Illuminate\Console\GeneratorCommand;
use Illuminate\Filesystem\Filesystem;
use Illuminate\Support\Str;
use Symfony\Component\Console\Input\InputArgument;
use function config;
use function str_replace;

abstract class LarapiFastGeneratorCommand extends GeneratorCommand {
	protected $config;
	protected $type;
	protected $suffix;
	static protected $excludedNames = [ ];

	public function __construct( Filesystem $files ) {
		$this->config = config( 'versoo.larapi-fast' );
		parent::__construct( $files );
	}

	protected function getArguments() {
		return [
			[ 'resource', InputArgument::REQUIRED, 'The name of the resource' ],
		];
	}

	protected function qualifyClass( $name ) {
		$name = ltrim( $name, '\\/' );

		return Str::replaceFirst( $this->getNamespace( $name ), '', Str::singular( $name ) ) . $this->suffix;
	}

	protected function getNamespace( $name, $type = null ) {
		$namespace = $this->rootNamespace();
		if ( $this->argument( 'resource' ) ) {
			$namespace .= Str::replaceFirst( $this->rootNamespace(), '', Str::plural( $this->argument( 'resource' ) ) ) . '\\';
		}
		$type = ( ! empty( $type ) ) ? $type : $this->type;
		if ( $type && $this->config[ $type ] && $this->config[ $type ]['directory'] ) {
			$namespace .= $this->config[ $type ]['directory'] . '\\';
		}
		$namespace .= Str::replaceFirst( $this->rootNamespace() . '\\' . $namespace, '', Str::singular( $name ) );

		return parent::getNamespace( $namespace ); // TODO: Change the autogenerated stub
	}

	protected function rootNamespace() {
		if ( $this->config['rootNamespace'] ) {
			return $this->config['rootNamespace'];
		}

		return parent::rootNamespace(); // TODO: Change the autogenerated stub
	}

	protected function replaceNamespace( &$stub, $name ) {
		$stub = str_replace(
			[ 'BaseModelsNamespace', 'BaseEventsNamespace', 'BaseRepositoriesNamespace', 'BaseExceptionsNamespace', 'BaseServicesNamespace', 'BaseRequestsNamespace' ],
			[
				$this->getNamespace( $name, 'Model' ),
				$this->getNamespace( $name, 'Event' ),
				$this->getNamespace( $name, 'Repository' ),
				$this->getNamespace( $name, 'Exception' ),
				$this->getNamespace( $name, 'Service' ),
				$this->getNamespace( $name, 'Request' )
			],
			$stub
		);

		return parent::replaceNamespace( $stub, $name );
	}

	protected function getPath( $name ) {
		$name = Str::replaceFirst( $this->getNamespace( $name ), '', $name );

		return $this->laravel->basePath() . '/' . str_replace( '\\', '/', $this->getNamespace( $name ) ) . '/' . str_replace( '\\', '/', $name ) . '.php';
	}

	protected function resolveStubsPath() {
		if ( $this->config && $stubPath = $this->config['stubs_directory'] ) {
			return $stubPath;
		}

		return __DIR__ . '/stubs';

	}

	protected function getNameInput() {
		if ( ! $this->argument( 'name' ) ) {
			$name = trim( $this->argument( 'resource' ) );
		} else {
			$name = parent::getNameInput();
		}

		return str_replace( static::$excludedNames, '', $name );
	}
}